module add (
    input alufn[6],
    input a[8],  
    input b[8],  
    output out[8],  
    output z,       
    output n,       
    output v     
  ) {
  
  sig result[8]; // sum
  sig xb[8];  // xb

  always {
    xb = b ^ 8x{alufn[0]}; // xb = XOR(B,alufn[0])
    case(alufn[1:0]){
    b000:result = a+b;     // sum
    b001:result = a-b;     // sub
    b010: //multuply
        result = a * b;
        
    b011: //change sign
        result = -a;
        
    b100: //absolute
        if (a[7] == 1){
          result = -a;  
       }
        else{
       result = a;
  }
      default:result = a-b;
    }
  v = (a[7] & xb[7] & ~result[7]) | (~a[7] & ~xb[7] & result[7]);    // return true when overflows in addition
  n = result[7];                                                  // return true when S is negative
  z = ~|result;                                                   // return true when S outputs are all zero
  out = result;                                                   // return sum as out 
}
}