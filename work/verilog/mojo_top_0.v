/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  localparam START_state = 6'd0;
  localparam ADD1_state = 6'd1;
  localparam ADD2_state = 6'd2;
  localparam ADD3_state = 6'd3;
  localparam ADD4_state = 6'd4;
  localparam ADD5_state = 6'd5;
  localparam ADDCHECKERROR_state = 6'd6;
  localparam ADDERROR_state = 6'd7;
  localparam BOO1_state = 6'd8;
  localparam BOO2_state = 6'd9;
  localparam BOO3_state = 6'd10;
  localparam BOO4_state = 6'd11;
  localparam BOO5_state = 6'd12;
  localparam BOOCHECKERROR_state = 6'd13;
  localparam BOOERROR_state = 6'd14;
  localparam SHIFT1_state = 6'd15;
  localparam SHIFT2_state = 6'd16;
  localparam SHIFT3_state = 6'd17;
  localparam SHIFTCHECKERROR_state = 6'd18;
  localparam SHIFTERROR_state = 6'd19;
  localparam COMP1_state = 6'd20;
  localparam COMP2_state = 6'd21;
  localparam COMP3_state = 6'd22;
  localparam COMP4_state = 6'd23;
  localparam COMP5_state = 6'd24;
  localparam COMP6_state = 6'd25;
  localparam COMPCHECKERROR_state = 6'd26;
  localparam COMPERROR_state = 6'd27;
  localparam MUX1_state = 6'd28;
  localparam MUX2_state = 6'd29;
  localparam MUXCHECKERROR_state = 6'd30;
  localparam MUXERROR_state = 6'd31;
  localparam CHANGESIGN1_state = 6'd32;
  localparam CHANGESIGN2_state = 6'd33;
  localparam CHANGESIGNCHECKERROR_state = 6'd34;
  localparam CHANGESIGNERROR_state = 6'd35;
  localparam ABSOLUTE1_state = 6'd36;
  localparam ABSOLUTE2_state = 6'd37;
  localparam ABSOLUTECHECKERROR_state = 6'd38;
  localparam ABSOLUTEERROR_state = 6'd39;
  localparam INV1_state = 6'd40;
  localparam INV2_state = 6'd41;
  localparam INVCHECKERROR_state = 6'd42;
  localparam INVERROR_state = 6'd43;
  localparam END_state = 6'd44;
  
  reg [5:0] M_state_d, M_state_q = START_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [5:0] alufn;
  
  reg [7:0] alu;
  
  localparam X = 5'h1a;
  
  wire [8-1:0] M_alu1_out;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  alu_3 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .out(M_alu1_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    a = io_dip[0+7-:8];
    b = io_dip[8+7-:8];
    alufn = io_dip[16+0+5-:6];
    M_alu1_a = a;
    M_alu1_b = b;
    M_alu1_alufn = alufn;
    alu = M_alu1_out;
    io_led[16+7-:8] = alu;
    io_led[0+7-:8] = a;
    io_led[8+7-:8] = b;
    M_seg_values = 16'heeee;
    
    case (M_state_q)
      START_state: begin
        M_counter_d = 1'h0;
        M_seg_values = 16'hd000;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = ADD1_state;
        end
      end
      ADD1_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h82;
        M_alu1_b = 8'h81;
        io_led[0+7-:8] = 8'h82;
        io_led[8+7-:8] = 8'h81;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'ha001;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h03) begin
          M_counter_d = 1'h0;
          M_state_d = ADD2_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h03) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERROR_state;
          end
        end
      end
      ADD2_state: begin
        M_alu1_alufn = 6'h01;
        M_alu1_a = 8'h80;
        M_alu1_b = 8'h81;
        io_led[0+7-:8] = 8'h80;
        io_led[8+7-:8] = 8'h81;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'ha002;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = ADD3_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERROR_state;
          end
        end
      end
      ADD3_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h02;
        M_alu1_b = 8'h5a;
        io_led[0+7-:8] = 8'h02;
        io_led[8+7-:8] = 8'h5a;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'ha003;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h5c) begin
          M_counter_d = 1'h0;
          M_state_d = ADD4_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h5c) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERROR_state;
          end
        end
      end
      ADD4_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7f;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7f;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'ha004;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'hfe) begin
          M_counter_d = 1'h0;
          M_state_d = ADD5_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hfe) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERROR_state;
          end
        end
      end
      ADD5_state: begin
        M_alu1_alufn = 6'h02;
        M_alu1_a = 8'h03;
        M_alu1_b = 8'h03;
        io_led[0+7-:8] = 8'h03;
        io_led[8+7-:8] = 8'h03;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'ha005;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h09) begin
          M_counter_d = 1'h0;
          M_state_d = ADDCHECKERROR_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h09) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERROR_state;
          end
        end
      end
      ADDCHECKERROR_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 9'h006;
        M_alu1_b = 8'h04;
        io_led[0+7-:8] = 8'h05;
        io_led[8+7-:8] = 8'h04;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'ha00f;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h09) begin
          M_counter_d = 1'h0;
          M_state_d = BOO1_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h09) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERROR_state;
          end
        end
      end
      ADDERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haeef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = BOO1_state;
        end
      end
      BOO1_state: begin
        M_alu1_alufn = 6'h1a;
        M_alu1_a = 8'hf8;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hb001;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'hf8) begin
          M_counter_d = 1'h0;
          M_state_d = BOO2_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hf8) begin
            M_counter_d = 1'h0;
            M_state_d = BOOERROR_state;
          end
        end
      end
      BOO2_state: begin
        M_alu1_alufn = 6'h18;
        M_alu1_a = 8'hf8;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hb002;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h18) begin
          M_counter_d = 1'h0;
          M_state_d = BOO3_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h18) begin
            M_counter_d = 1'h0;
            M_state_d = BOOERROR_state;
          end
        end
      end
      BOO3_state: begin
        M_alu1_alufn = 6'h1e;
        M_alu1_a = 8'hf8;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hb003;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = BOO4_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = BOOERROR_state;
          end
        end
      end
      BOO4_state: begin
        M_alu1_alufn = 6'h16;
        M_alu1_a = 8'hf8;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hb004;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'he7) begin
          M_counter_d = 1'h0;
          M_state_d = BOOCHECKERROR_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'he7) begin
            M_counter_d = 1'h0;
            M_state_d = BOOERROR_state;
          end
        end
      end
      BOOCHECKERROR_state: begin
        M_alu1_alufn = 6'h16;
        M_alu1_a = 9'h0f9;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hb00f;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'he7) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFT1_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'he7) begin
            M_counter_d = 1'h0;
            M_state_d = BOOERROR_state;
          end
        end
      end
      BOOERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hbeef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFT1_state;
        end
      end
      SHIFT1_state: begin
        M_alu1_alufn = 6'h20;
        M_alu1_a = 8'h40;
        M_alu1_b = 8'h01;
        io_led[0+7-:8] = 8'h40;
        io_led[8+7-:8] = 8'h01;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hd001;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h80) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFT2_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h80) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFT2_state: begin
        M_alu1_alufn = 6'h21;
        M_alu1_a = 8'hf0;
        M_alu1_b = 8'h04;
        io_led[0+7-:8] = 8'hf0;
        io_led[8+7-:8] = 8'h04;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hd002;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h0f) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFT3_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h0f) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFT3_state: begin
        M_alu1_alufn = 6'h23;
        M_alu1_a = 8'hf0;
        M_alu1_b = 8'h04;
        io_led[0+7-:8] = 8'hf0;
        io_led[8+7-:8] = 8'h04;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hd003;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTCHECKERROR_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTCHECKERROR_state: begin
        M_alu1_alufn = 6'h23;
        M_alu1_a = 9'h0f1;
        M_alu1_b = 8'h01;
        io_led[0+7-:8] = 8'hf0;
        io_led[8+7-:8] = 8'h01;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hd00f;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'he0) begin
          M_counter_d = 1'h0;
          M_state_d = COMP1_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'he0) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hdeef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMP1_state;
        end
      end
      COMP1_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7f;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7f;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hc001;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = COMP2_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMP2_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7e;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7e;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hc002;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = COMP3_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMP3_state: begin
        M_alu1_alufn = 6'h35;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7e;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7e;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hc003;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = COMPCHECKERROR_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPCHECKERROR_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 9'h07f;
        M_alu1_b = 8'h7e;
        io_led[0+7-:8] = 8'h7e;
        io_led[8+7-:8] = 8'h7e;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hc00f;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = CHANGESIGN1_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hceef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CHANGESIGN1_state;
        end
      end
      CHANGESIGN1_state: begin
        M_alu1_alufn = 6'h03;
        M_alu1_a = 8'hff;
        io_led[0+7-:8] = 8'hff;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hcd01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = CHANGESIGN2_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = CHANGESIGNERROR_state;
          end
        end
      end
      CHANGESIGN2_state: begin
        M_alu1_alufn = 6'h03;
        M_alu1_a = 8'h01;
        io_led[0+7-:8] = 8'h01;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hcd02;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = CHANGESIGNCHECKERROR_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = CHANGESIGNERROR_state;
          end
        end
      end
      CHANGESIGNCHECKERROR_state: begin
        M_alu1_alufn = 6'h03;
        M_alu1_a = 9'h002;
        io_led[0+7-:8] = 8'h01;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hcd0f;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = ABSOLUTE1_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = CHANGESIGNERROR_state;
          end
        end
      end
      CHANGESIGNERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hcdef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = ABSOLUTE1_state;
        end
      end
      ABSOLUTE1_state: begin
        M_alu1_alufn = 6'h04;
        M_alu1_a = 8'hff;
        io_led[0+7-:8] = 8'hff;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haa01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = ABSOLUTE2_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = ABSOLUTEERROR_state;
          end
        end
      end
      ABSOLUTE2_state: begin
        M_alu1_alufn = 6'h04;
        M_alu1_a = 8'h01;
        io_led[0+7-:8] = 8'h01;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haa02;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = ABSOLUTECHECKERROR_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = ABSOLUTEERROR_state;
          end
        end
      end
      ABSOLUTECHECKERROR_state: begin
        M_alu1_alufn = 6'h04;
        M_alu1_a = 9'h002;
        io_led[0+7-:8] = 8'h01;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haa0f;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = INV1_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = ABSOLUTEERROR_state;
          end
        end
      end
      ABSOLUTEERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haaef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = INV1_state;
        end
      end
      INV1_state: begin
        M_alu1_alufn = 6'h03;
        M_alu1_a = 8'hff;
        io_led[0+7-:8] = 8'hff;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h1001;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = INV2_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = INVERROR_state;
          end
        end
      end
      INV2_state: begin
        M_alu1_alufn = 6'h03;
        M_alu1_a = 8'h00;
        io_led[0+7-:8] = 8'h00;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h1002;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = INVCHECKERROR_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = INVERROR_state;
          end
        end
      end
      INVCHECKERROR_state: begin
        M_alu1_alufn = 6'h03;
        M_alu1_a = 9'h002;
        io_led[0+7-:8] = 8'h01;
        alu = M_alu1_out;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h100f;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1 && alu == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = END_state;
        end else begin
          if (M_counter_q[26+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = INVERROR_state;
          end
        end
      end
      INVERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h1eef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = END_state;
        end
      end
      END_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hfeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
